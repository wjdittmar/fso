services:
  app:
    image: todo-frontend
    build:
      context: ./todo-frontend
      dockerfile: dev.Dockerfile
    volumes:
      - ./todo-frontend:/usr/src/app
    # do not need to expose this anymore, because we are accessing everything through
    # nginx -- and the nginx.dev.conf file 
    # forwards / to port 5173, and is in the same container as the frontend 
    # so does not need the port exposed

    #ports:
    #  - 5173:5173
    container_name: todo-frontend # This will name the container todo-frontend
    depends_on:
      - backend
  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.dev.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 8080:80
    container_name: reverse-proxy
    depends_on:
      - app # wait for the container to be started
      - backend
  mongo:
    image: mongo
    ports:
     - 3456:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: the_database

    volumes: 
      - ./todo-backend/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
      - ./todo-backend//mongo_data:/data/db
  redis:
    image: redis
    ports:
     - 6379:6379
    command: ['redis-server', '--appendonly', 'yes'] # Overwrite the CMD
    volumes: # Declare the volume
      - ./todo-backend/redis_data:/data
  backend:
    image: backend-dev
    build:
      context: ./todo-backend
      dockerfile: dev.Dockerfile

    # do not need to expose this anymore, because we are accessing everything through
    # nginx -- and the nginx.dev.conf file 
    # forwards /api/todos to localhost:3000, and is in the same container as the backend 
    # so does not need the port exposed
    #ports:
    #  - 3000:3000
    environment:
      - MONGO_URL=mongodb://the_username:the_password@mongo:27017/the_database
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongo
      - redis
    volumes:
      - ./todo-backend/:/usr/src/app